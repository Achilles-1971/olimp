package com.example.olimp.data.repository

import android.util.Log
import com.example.olimp.MyApplication
import com.example.olimp.data.models.Friendship
import com.example.olimp.data.models.UserResponse
import com.example.olimp.network.ApiService
import com.example.olimp.network.FriendRequest
import com.example.olimp.network.FriendRequestParams
import com.example.olimp.utils.SessionManager
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.ResponseBody.Companion.toResponseBody
import retrofit2.Response

class UserRepository(private val api: ApiService) {

    private val sessionManager = SessionManager(MyApplication.context)

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω –∏ userId.
     */
    suspend fun getCurrentUser(): Response<UserResponse> {
        val token = sessionManager.getAuthToken()
        val userId = sessionManager.getUserId()

        Log.d("UserRepository", "üîç –¢–æ–∫–µ–Ω: $token")
        Log.d("UserRepository", "üîç userId: $userId")

        if (token.isNullOrEmpty() || userId == null) {
            Log.e("UserRepository", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            throw Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        }

        Log.d("UserRepository", "‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: $userId")
        return api.getUserById(userId)
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     * @return Response —Å —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ—à–∏–±–∫–æ–π.
     */
    suspend fun getAllUsers(): Response<List<UserResponse>> {
        Log.d("UserRepository", "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return api.getAllUsers()
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @return Response —Å —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π –∏–ª–∏ –æ—à–∏–±–∫–æ–π.
     */
    suspend fun getFriendships(): Response<List<Friendship>> {
        Log.d("UserRepository", "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π")
        return api.getFriendships()
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è.
     * @param friendId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É.
     * @return Response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
     */
    suspend fun sendFriendRequest(friendId: Int): Response<Unit> {
        val currentUserId = sessionManager.getUserId() ?: throw Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        val request = FriendRequestParams(user_id = currentUserId, friend_id = friendId)
        Log.d("UserRepository", "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç $currentUserId –∫ $friendId")
        return api.sendFriendRequest(request)
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –¥—Ä—É–∂–±—É.
     * @param friendId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤—è–∑—å.
     * @return Response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
     */
    suspend fun cancelFriendRequest(friendId: Int): Response<Unit> {
        val currentUserId = sessionManager.getUserId() ?: throw Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        val request = FriendRequestParams(user_id = currentUserId, friend_id = friendId)
        Log.d("UserRepository", "–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –º–µ–∂–¥—É $currentUserId –∏ $friendId")
        return api.cancelFriendRequest(request) // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ API
    }

    /**
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è.
     * @param friendshipId ID –¥—Ä—É–∂–µ—Å–∫–æ–π —Å–≤—è–∑–∏.
     * @return Response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
     */
    suspend fun acceptFriend(friendshipId: Int): Response<Unit> {
        val request = FriendRequest(friendship_id = friendshipId)
        Log.d("UserRepository", "–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ —Å ID: $friendshipId")
        return api.acceptFriend(request)
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –¥—Ä—É–∂–µ—Å–∫—É—é —Å–≤—è–∑—å.
     * @param friendshipId ID –¥—Ä—É–∂–µ—Å–∫–æ–π —Å–≤—è–∑–∏.
     * @return Response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
     */
    suspend fun removeFriend(friendshipId: Int): Response<Unit> {
        val request = FriendRequest(friendship_id = friendshipId)
        Log.d("UserRepository", "–£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∂–±—ã —Å ID: $friendshipId")
        return api.removeFriend(request)
    }

    suspend fun acceptFriendRequest(friendshipId: Int): Response<Unit> {
        val body = FriendRequest(friendship_id = friendshipId)
        return api.acceptFriend(body)
    }

    suspend fun getUserById(id: Int): Response<UserResponse> {
        Log.d("UserRepository", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: $id")
        return api.getUserById(id)
    }

    suspend fun getFriendRequests(): Response<List<Friendship>> {
        Log.d("UserRepository", "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è")
        return api.getFriendships("pending") // –ò—Å–ø–æ–ª—å–∑—É–µ–º getFriendships —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "pending"
    }

    suspend fun getFriends(): Response<List<Friendship>> {
        Log.d("UserRepository", "ü§ù –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π")
        return api.getFriendships("accepted") // –ò—Å–ø–æ–ª—å–∑—É–µ–º getFriendships —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "accepted"
    }

    suspend fun getFriendList(): Response<List<Friendship>> {
        return api.getFriendships(filter = "accepted")
    }

}