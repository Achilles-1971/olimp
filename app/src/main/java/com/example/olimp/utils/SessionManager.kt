package com.example.olimp.utils

import android.content.Context
import android.content.SharedPreferences
import android.util.Log
import com.example.olimp.data.models.UserResponse

class SessionManager(context: Context) {

    private val prefs: SharedPreferences =
        context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)

    companion object {
        private const val PREFS_NAME = "user_prefs"

        private const val KEY_AUTH_TOKEN = "auth_token"
        private const val KEY_EMAIL = "email"
        private const val KEY_USER_EMAIL = "user_email"
        private const val KEY_IS_LOGGED_IN = "is_logged_in"
        private const val KEY_USER_ID = "user_id"
        private const val KEY_USERNAME = "username"
        private const val KEY_AVATAR = "avatar"
        private const val KEY_IS_EMAIL_CONFIRMED = "is_email_confirmed"
        private const val KEY_ROLE = "role"
        private const val KEY_BIO = "bio"
        private const val KEY_CREATED_AT = "created_at"
        private const val KEY_UPDATED_AT = "updated_at"
        private const val KEY_LOCATION_PERMISSION_REQUESTED = "location_permission_requested"
        private const val KEY_FCM_TOKEN = "fcm_token" // –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è FCM-—Ç–æ–∫–µ–Ω–∞
    }

    fun saveAuthToken(token: String, email: String, userId: Int) {
        val cleanToken = token.trim().removePrefix("Token ")
        with(prefs.edit()) {
            putString(KEY_AUTH_TOKEN, cleanToken)
            putString(KEY_USER_EMAIL, email)
            putInt(KEY_USER_ID, userId)
            putBoolean(KEY_IS_LOGGED_IN, true)
            apply()
        }
        Log.d("SessionManager", "üîí –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–æ–∫–µ–Ω: '$cleanToken', email: '$email', userId: $userId")
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UserResponse) –≤ SharedPreferences.
     */
    fun saveUserProfile(user: UserResponse) {
        Log.d("SessionManager", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: id=${user.id}, username=${user.username}, email=${user.email}, avatar=${user.avatar}")
        with(prefs.edit()) {
            putInt(KEY_USER_ID, user.id)
            putString(KEY_USERNAME, user.username)
            putString(KEY_EMAIL, user.email)
            putString(KEY_AVATAR, user.avatar)
            user.isEmailConfirmed?.let { putBoolean(KEY_IS_EMAIL_CONFIRMED, it) }
            putString(KEY_ROLE, user.role)
            putString(KEY_BIO, user.bio)
            putString(KEY_CREATED_AT, user.created_at)
            putString(KEY_UPDATED_AT, user.updated_at)
            apply()
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ SharedPreferences.
     */
    fun getAuthToken(): String? {
        val token = prefs.getString(KEY_AUTH_TOKEN, null)?.trim()
        Log.d("SessionManager", "üü¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: '$token'")
        return token
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω (—É–±–∏—Ä–∞—è –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å "Token ").
     */
    fun updateAuthToken(newToken: String) {
        val cleanToken = newToken.removePrefix("Token ").trim()
        prefs.edit().putString(KEY_AUTH_TOKEN, cleanToken).apply()
        Log.d("SessionManager", "üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–∫–µ–Ω: '$cleanToken'")
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–∞–∫ user_email.
     */
    fun getUserEmail(): String? {
        val email = prefs.getString(KEY_USER_EMAIL, null)
        Log.d("SessionManager", "üìß –ü–æ–ª—É—á–µ–Ω email: '$email'")
        return email
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç userId, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–ª–∏ null, –µ—Å–ª–∏ -1).
     */
    fun getUserId(): Int? {
        val userId = prefs.getInt(KEY_USER_ID, -1).takeIf { it != -1 }
        Log.d("SessionManager", "üÜî –ü–æ–ª—É—á–µ–Ω userId: $userId")
        return userId
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
     */
    fun isUserLoggedIn(): Boolean {
        val isLoggedIn = prefs.getBoolean(KEY_IS_LOGGED_IN, false)
        Log.d("SessionManager", "üîê –°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞: $isLoggedIn")
        return isLoggedIn
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å—é —Å–µ—Å—Å–∏—é.
     */
    fun clearSession() {
        prefs.edit().clear().apply()
        Log.d("SessionManager", "üßπ –í—Å—è —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞")
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω –∏ —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞.
     */
    fun clearAuthToken() {
        with(prefs.edit()) {
            remove(KEY_AUTH_TOKEN)
            putBoolean(KEY_IS_LOGGED_IN, false)
            apply()
        }
        Log.d("SessionManager", "üö´ –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω, —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞ —Å–±—Ä–æ—à–µ–Ω")
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–∞–Ω–∞–ª–æ–≥ clearAuthToken).
     */
    fun logout() {
        with(prefs.edit()) {
            remove(KEY_AUTH_TOKEN)
            putBoolean(KEY_IS_LOGGED_IN, false)
            apply()
        }
        Log.d("SessionManager", "üèÉ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç UserResponse, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω (id, username),
     * –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null.
     */
    fun getUserProfile(): UserResponse? {
        val userId = getUserId() ?: return null
        val username = prefs.getString(KEY_USERNAME, null) ?: return null

        val email = prefs.getString(KEY_EMAIL, null)
        val avatar = prefs.getString(KEY_AVATAR, null)
        val isEmailConfirmed = if (prefs.contains(KEY_IS_EMAIL_CONFIRMED)) {
            prefs.getBoolean(KEY_IS_EMAIL_CONFIRMED, false)
        } else null
        val role = prefs.getString(KEY_ROLE, null)
        val bio = prefs.getString(KEY_BIO, null)
        val createdAt = prefs.getString(KEY_CREATED_AT, null)
        val updatedAt = prefs.getString(KEY_UPDATED_AT, null)

        val user = UserResponse(
            id = userId,
            username = username,
            email = email,
            avatar = avatar,
            isEmailConfirmed = isEmailConfirmed,
            role = role,
            bio = bio,
            created_at = createdAt,
            updated_at = updatedAt
        )
        Log.d("SessionManager", "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: id=$userId, username=$username")
        return user
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.
     */
    fun hasRequestedLocationPermission(): Boolean {
        val requested = prefs.getBoolean(KEY_LOCATION_PERMISSION_REQUESTED, false)
        Log.d("SessionManager", "üìç –ë—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $requested")
        return requested
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω.
     */
    fun setLocationPermissionRequested(requested: Boolean) {
        with(prefs.edit()) {
            putBoolean(KEY_LOCATION_PERMISSION_REQUESTED, requested)
            apply()
        }
        Log.d("SessionManager", "üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $requested")
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç FCM-—Ç–æ–∫–µ–Ω –≤ SharedPreferences.
     */
    fun saveFcmToken(token: String) {
        with(prefs.edit()) {
            putString(KEY_FCM_TOKEN, token)
            apply()
        }
        Log.d("SessionManager", "üî• –°–æ—Ö—Ä–∞–Ω—ë–Ω FCM-—Ç–æ–∫–µ–Ω: '$token'")
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç FCM-—Ç–æ–∫–µ–Ω –∏–∑ SharedPreferences.
     */
    fun getFcmToken(): String? {
        val token = prefs.getString(KEY_FCM_TOKEN, null)
        Log.d("SessionManager", "üî• –ü–æ–ª—É—á–µ–Ω FCM-—Ç–æ–∫–µ–Ω: '$token'")
        return token
    }


}