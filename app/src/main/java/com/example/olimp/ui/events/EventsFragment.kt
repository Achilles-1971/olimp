package com.example.olimp.ui.events

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.example.olimp.R
import com.example.olimp.data.repository.EventsRepository
import com.example.olimp.network.RetrofitInstance
import com.google.android.material.chip.Chip
import com.google.android.material.floatingactionbutton.FloatingActionButton

class EventsFragment : Fragment() {

    private lateinit var viewModel: EventsViewModel
    private lateinit var adapter: EventAdapter
    private var lastToastTime: Long = 0
    private val toastInterval: Long = 2000 // 2 —Å–µ–∫—É–Ω–¥—ã
    private var currentFilter: String = "popular"
    private var emptyListMessage: TextView? = null

    override fun onAttach(context: Context) {
        super.onAttach(context)
        Log.d("EventsFragment", "üü¢ onAttach called")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("EventsFragment", "üü¢ onCreate called")
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        Log.d("EventsFragment", "üü¢ onCreateView called")

        val view = inflater.inflate(R.layout.fragment_events, container, false)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RecyclerView
        val rvEvents = view.findViewById<RecyclerView>(R.id.rvEvents)
        if (rvEvents == null) {
            Log.e("EventsFragment", "üî¥ RecyclerView not found!")
        } else {
            adapter = EventAdapter { event ->
                Log.d("EventsFragment", "üü¢ Event clicked: ${event.title}")
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º EventDetailActivity, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                val intent = Intent(requireContext(), EventDetailActivity::class.java)
                intent.putExtra("EVENT_ID", event.id)
                startActivity(intent)
            }
            rvEvents.layoutManager = LinearLayoutManager(requireContext())
            rvEvents.adapter = adapter
            adapter.setItems(emptyList()) // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            Log.d("EventsFragment", "üü¢ RecyclerView initialized")
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
        try {
            val factory = EventsViewModelFactory(
                EventsRepository(RetrofitInstance.getApi(requireContext()))
            )
            viewModel = ViewModelProvider(this, factory)[EventsViewModel::class.java]
        } catch (e: Exception) {
            Log.e("EventsFragment", "üî¥ Error initializing ViewModel: ${e.message}")
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è emptyListMessage
        emptyListMessage = view.findViewById(R.id.emptyListMessage)

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        viewModel.events.observe(viewLifecycleOwner) { events ->
            Log.d("EventsFragment", "üü¢ Events updated: ${events.size} items")
            adapter.setItems(events)

            if (events.isEmpty()) {
                emptyListMessage?.visibility = View.VISIBLE
                emptyListMessage?.text = when (currentFilter) {
                    "upcoming" -> "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                    "planned" -> "–ù–µ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                    else -> "–ù–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                }
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastToastTime >= toastInterval) {
                    Toast.makeText(requireContext(), emptyListMessage?.text, Toast.LENGTH_SHORT)
                        .show()
                    lastToastTime = currentTime
                }
            } else {
                emptyListMessage?.visibility = View.GONE
            }
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        viewModel.isLoading.observe(viewLifecycleOwner) { isLoading ->
            view.findViewById<ProgressBar>(R.id.progressBar)?.visibility =
                if (isLoading) View.VISIBLE else View.GONE

            // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            val chipPopular = view.findViewById<Chip>(R.id.chipPopular)
            val chipUpcoming = view.findViewById<Chip>(R.id.chipUpcoming)
            val chipPlanned = view.findViewById<Chip>(R.id.chipPlanned)
            chipPopular?.isEnabled = !isLoading
            chipUpcoming?.isEnabled = !isLoading
            chipPlanned?.isEnabled = !isLoading
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—à–∏–±–∫–∞–º–∏
        viewModel.error.observe(viewLifecycleOwner) { errorMsg ->
            errorMsg?.let {
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastToastTime >= toastInterval) {
                    Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show()
                    lastToastTime = currentTime
                }
                Log.e("EventsFragment", "üî¥ Error: $it")
            }
        }

        // SwipeRefreshLayout
        val swipeRefresh = view.findViewById<SwipeRefreshLayout>(R.id.swipeRefresh)
        swipeRefresh?.setOnRefreshListener {
            Log.d("EventsFragment", "üü¢ SwipeRefresh triggered")
            viewModel.loadEvents(currentFilter)
            swipeRefresh.isRefreshing = false
        }

        // –§–∏–ª—å—Ç—Ä—ã (Chip)
        view.findViewById<Chip>(R.id.chipPopular)?.setOnClickListener {
            Log.d("EventsFragment", "üü¢ Chip Popular clicked")
            currentFilter = "popular"
            viewModel.loadEvents("popular")
            updateChipStates()
        }
        view.findViewById<Chip>(R.id.chipUpcoming)?.setOnClickListener {
            Log.d("EventsFragment", "üü¢ Chip Upcoming clicked")
            currentFilter = "upcoming"
            viewModel.loadEvents("upcoming")
            updateChipStates()
        }
        view.findViewById<Chip>(R.id.chipPlanned)?.setOnClickListener {
            Log.d("EventsFragment", "üü¢ Chip Planned clicked")
            currentFilter = "planned"
            viewModel.loadEvents("planned")
            updateChipStates()
        }

        // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        viewModel.loadEvents("popular")
        currentFilter = "popular"
        updateChipStates()

        // FAB (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
        val fabCreateEvent = view.findViewById<FloatingActionButton>(R.id.fabCreateEvent)
        fabCreateEvent?.setOnClickListener {
            Log.d("EventsFragment", "üü¢ FAB clicked")
            Toast.makeText(requireContext(), "FAB –ù–ê–ñ–ê–¢!", Toast.LENGTH_SHORT).show()
            openCreateEventScreen()
        }

        return view
    }

    private fun updateChipStates() {
        view?.findViewById<Chip>(R.id.chipPopular)?.isChecked = currentFilter == "popular"
        view?.findViewById<Chip>(R.id.chipUpcoming)?.isChecked = currentFilter == "upcoming"
        view?.findViewById<Chip>(R.id.chipPlanned)?.isChecked = currentFilter == "planned"
    }

    private fun openCreateEventScreen() {
        val intent = Intent(requireContext(), CreateEventActivity::class.java)
        startActivity(intent)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        emptyListMessage = null
    }
}
